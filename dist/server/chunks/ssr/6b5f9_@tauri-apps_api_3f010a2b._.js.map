{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/feitan/Desktop/new%20ai/node_modules/.pnpm/%40tauri-apps%2Bapi%402.5.0/node_modules/%40tauri-apps/api/dpi.js"],"sourcesContent":["import { SERIALIZE_TO_IPC_FN } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A size represented in logical pixels.\n *\n * @since 2.0.0\n */\nclass LogicalSize {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.width = args[0].Logical.width;\n                this.height = args[0].Logical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the logical size to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalSize } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = new LogicalSize(400, 500);\n     * const physical = size.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalSize(this.width * scaleFactor, this.height * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * @since 2.0.0\n */\nclass PhysicalSize {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.width = args[0].Physical.width;\n                this.height = args[0].Physical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize(); // PhysicalSize\n     * const logical = size.toLogical(factor);\n     * ```\n     */\n    toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Size` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Size`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = size instanceof LogicalSize\n *   ? { Logical: { width: size.width, height: size.height } }\n *   : { Physical: { width: size.width, height: size.height } }\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * You can just use {@linkcode Size}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize, Size } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = new Size(size);\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * @since 2.1.0\n */\nclass Size {\n    constructor(size) {\n        this.size = size;\n    }\n    toLogical(scaleFactor) {\n        return this.size instanceof LogicalSize\n            ? this.size\n            : this.size.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.size instanceof PhysicalSize\n            ? this.size\n            : this.size.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.size.type}`]: {\n                width: this.size.width,\n                height: this.size.height\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n *  A position represented in logical pixels.\n *\n * @since 2.0.0\n */\nclass LogicalPosition {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.x = args[0].Logical.x;\n                this.y = args[0].Logical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the logical position to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new LogicalPosition(400, 500);\n     * const physical = position.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalPosition(this.x * scaleFactor, this.y * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n *  A position represented in physical pixels.\n *\n * @since 2.0.0\n */\nclass PhysicalPosition {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.x = args[0].Physical.x;\n                this.y = args[0].Physical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { PhysicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new PhysicalPosition(400, 500);\n     * const physical = position.toLogical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A position represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Position` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Position`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = position instanceof LogicalPosition\n *   ? { Logical: { x: position.x, y: position.y } }\n *   : { Physical: { x: position.x, y: position.y } }\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * You can just use {@linkcode Position}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition, Position } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = new Position(position);\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * @since 2.1.0\n */\nclass Position {\n    constructor(position) {\n        this.position = position;\n    }\n    toLogical(scaleFactor) {\n        return this.position instanceof LogicalPosition\n            ? this.position\n            : this.position.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.position instanceof PhysicalPosition\n            ? this.position\n            : this.position.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.position.type}`]: {\n                x: this.position.x,\n                y: this.position.y\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n\nexport { LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, Position, Size };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/feitan/Desktop/new%20ai/node_modules/.pnpm/%40tauri-apps%2Bapi%402.5.0/node_modules/%40tauri-apps/api/image.js"],"sourcesContent":["import { Resource, invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** An RGBA Image in row-major order from top to bottom. */\nclass Image extends Resource {\n    /**\n     * Creates an Image from a resource ID. For internal use only.\n     *\n     * @ignore\n     */\n    constructor(rid) {\n        super(rid);\n    }\n    /** Creates a new Image using RGBA data, in row-major order from top to bottom, and with specified width and height. */\n    static async new(rgba, width, height) {\n        return invoke('plugin:image|new', {\n            rgba: transformImage(rgba),\n            width,\n            height\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided bytes by inferring the file format.\n     * If the format is known, prefer [@link Image.fromPngBytes] or [@link Image.fromIcoBytes].\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromBytes(bytes) {\n        return invoke('plugin:image|from_bytes', {\n            bytes: transformImage(bytes)\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided path.\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromPath(path) {\n        return invoke('plugin:image|from_path', { path }).then((rid) => new Image(rid));\n    }\n    /** Returns the RGBA data for this image, in row-major order from top to bottom.  */\n    async rgba() {\n        return invoke('plugin:image|rgba', {\n            rid: this.rid\n        }).then((buffer) => new Uint8Array(buffer));\n    }\n    /** Returns the size of this image.  */\n    async size() {\n        return invoke('plugin:image|size', { rid: this.rid });\n    }\n}\n/**\n * Transforms image from various types into a type acceptable by Rust.\n *\n * See [tauri::image::JsImage](https://docs.rs/tauri/2/tauri/image/enum.JsImage.html) for more information.\n * Note the API signature is not stable and might change.\n */\nfunction transformImage(image) {\n    const ret = image == null\n        ? null\n        : typeof image === 'string'\n            ? image\n            : image instanceof Image\n                ? image.rid\n                : image;\n    return ret;\n}\n\nexport { Image, transformImage };\n"],"names":[],"mappings":";;;;AAAA;;AAEA,qEAAqE;AACrE,sCAAsC;AACtC,+BAA+B;AAC/B,yDAAyD,GACzD,MAAM,cAAc,iNAAA,CAAA,WAAQ;IACxB;;;;KAIC,GACD,YAAY,GAAG,CAAE;QACb,KAAK,CAAC;IACV;IACA,qHAAqH,GACrH,aAAa,IAAI,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE;QAClC,OAAO,CAAA,GAAA,iNAAA,CAAA,SAAM,AAAD,EAAE,oBAAoB;YAC9B,MAAM,eAAe;YACrB;YACA;QACJ,GAAG,IAAI,CAAC,CAAC,MAAQ,IAAI,MAAM;IAC/B;IACA;;;;;;;;;;;;KAYC,GACD,aAAa,UAAU,KAAK,EAAE;QAC1B,OAAO,CAAA,GAAA,iNAAA,CAAA,SAAM,AAAD,EAAE,2BAA2B;YACrC,OAAO,eAAe;QAC1B,GAAG,IAAI,CAAC,CAAC,MAAQ,IAAI,MAAM;IAC/B;IACA;;;;;;;;;;;KAWC,GACD,aAAa,SAAS,IAAI,EAAE;QACxB,OAAO,CAAA,GAAA,iNAAA,CAAA,SAAM,AAAD,EAAE,0BAA0B;YAAE;QAAK,GAAG,IAAI,CAAC,CAAC,MAAQ,IAAI,MAAM;IAC9E;IACA,kFAAkF,GAClF,MAAM,OAAO;QACT,OAAO,CAAA,GAAA,iNAAA,CAAA,SAAM,AAAD,EAAE,qBAAqB;YAC/B,KAAK,IAAI,CAAC,GAAG;QACjB,GAAG,IAAI,CAAC,CAAC,SAAW,IAAI,WAAW;IACvC;IACA,qCAAqC,GACrC,MAAM,OAAO;QACT,OAAO,CAAA,GAAA,iNAAA,CAAA,SAAM,AAAD,EAAE,qBAAqB;YAAE,KAAK,IAAI,CAAC,GAAG;QAAC;IACvD;AACJ;AACA;;;;;CAKC,GACD,SAAS,eAAe,KAAK;IACzB,MAAM,MAAM,SAAS,OACf,OACA,OAAO,UAAU,WACb,QACA,iBAAiB,QACb,MAAM,GAAG,GACT;IACd,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/feitan/Desktop/new%20ai/node_modules/.pnpm/%40tauri-apps%2Bapi%402.5.0/node_modules/%40tauri-apps/api/window.js"],"sourcesContent":["import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nexport { LogicalPosition, LogicalSize } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { transformImage } from './image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * #### Window events\n *\n * Events can be listened to using {@link Window.listen}:\n * ```typescript\n * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n * getCurrentWindow().listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\nclass CloseRequestedEvent {\n    constructor(event) {\n        this._preventDefault = false;\n        this.event = event.event;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\nvar ProgressBarStatus;\n(function (ProgressBarStatus) {\n    /**\n     * Hide progress bar.\n     */\n    ProgressBarStatus[\"None\"] = \"none\";\n    /**\n     * Normal state.\n     */\n    ProgressBarStatus[\"Normal\"] = \"normal\";\n    /**\n     * Indeterminate state. **Treated as Normal on Linux and macOS**\n     */\n    ProgressBarStatus[\"Indeterminate\"] = \"indeterminate\";\n    /**\n     * Paused state. **Treated as Normal on Linux**\n     */\n    ProgressBarStatus[\"Paused\"] = \"paused\";\n    /**\n     * Error state. **Treated as Normal on linux**\n     */\n    ProgressBarStatus[\"Error\"] = \"error\";\n})(ProgressBarStatus || (ProgressBarStatus = {}));\n/**\n * Get an instance of `Window` for the current window.\n *\n * @since 1.0.0\n */\nfunction getCurrentWindow() {\n    return new Window(window.__TAURI_INTERNALS__.metadata.currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Window` for all available windows.\n *\n * @since 1.0.0\n */\nasync function getAllWindows() {\n    return invoke('plugin:window|get_all_windows').then((windows) => windows.map((w) => new Window(w, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created window\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new window or get a handle to an existing one.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n *\n * const appWindow = new Window('theUniqueLabel');\n *\n * appWindow.once('tauri://created', function () {\n *  // window successfully created\n * });\n * appWindow.once('tauri://error', function (e) {\n *  // an error happened creating the window\n * });\n *\n * // emit an event to the backend\n * await appWindow.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await appWindow.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */\nclass Window {\n    /**\n     * Creates a new Window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const appWindow = new Window('my-label');\n     * appWindow.once('tauri://created', function () {\n     *  // window successfully created\n     * });\n     * appWindow.once('tauri://error', function (e) {\n     *  // an error happened creating the window\n     * });\n     * ```\n     *\n     * @param label The unique window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Window} instance to communicate with the window.\n     */\n    constructor(label, options = {}) {\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:window|create', {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === 'string'\n                        ? options.parent\n                        : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Window associated with the given label.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const mainWindow = Window.getByLabel('main');\n     * ```\n     *\n     * @param label The window label.\n     * @returns The Window instance to communicate with the window or null if the window doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        return (_a = (await getAllWindows()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Window` for the current window.\n     */\n    static getCurrent() {\n        return getCurrentWindow();\n    }\n    /**\n     * Gets a list of instances of `Window` for all available windows.\n     */\n    static async getAll() {\n        return getAllWindows();\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const focusedWindow = Window.getFocusedWindow();\n     * ```\n     *\n     * @returns The Window instance or `undefined` if there is not any focused window.\n     */\n    static async getFocusedWindow() {\n        for (const w of await getAllWindows()) {\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n    /**\n     * Listen to an emitted event on this window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this window only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emit(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('main', 'window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line security/detect-object-injection\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emitTo(target, event, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const factor = await getCurrentWindow().scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     */\n    async scaleFactor() {\n        return invoke('plugin:window|scale_factor', {\n            label: this.label\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     */\n    async innerPosition() {\n        return invoke('plugin:window|inner_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     */\n    async outerPosition() {\n        return invoke('plugin:window|outer_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     */\n    async innerSize() {\n        return invoke('plugin:window|inner_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     */\n    async outerSize() {\n        return invoke('plugin:window|outer_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const fullscreen = await getCurrentWindow().isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     */\n    async isFullscreen() {\n        return invoke('plugin:window|is_fullscreen', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimized = await getCurrentWindow().isMinimized();\n     * ```\n     */\n    async isMinimized() {\n        return invoke('plugin:window|is_minimized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximized = await getCurrentWindow().isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     */\n    async isMaximized() {\n        return invoke('plugin:window|is_maximized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const focused = await getCurrentWindow().isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     */\n    async isFocused() {\n        return invoke('plugin:window|is_focused', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const decorated = await getCurrentWindow().isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     */\n    async isDecorated() {\n        return invoke('plugin:window|is_decorated', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const resizable = await getCurrentWindow().isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     */\n    async isResizable() {\n        return invoke('plugin:window|is_resizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximizable = await getCurrentWindow().isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     */\n    async isMaximizable() {\n        return invoke('plugin:window|is_maximizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimizable = await getCurrentWindow().isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     */\n    async isMinimizable() {\n        return invoke('plugin:window|is_minimizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const closable = await getCurrentWindow().isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     */\n    async isClosable() {\n        return invoke('plugin:window|is_closable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const visible = await getCurrentWindow().isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isVisible() {\n        return invoke('plugin:window|is_visible', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const title = await getCurrentWindow().title();\n     * ```\n     */\n    async title() {\n        return invoke('plugin:window|title', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const theme = await getCurrentWindow().theme();\n     * ```\n     *\n     * @returns The window theme.\n     */\n    async theme() {\n        return invoke('plugin:window|theme', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window is configured to be always on top of other windows or not.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const alwaysOnTop = await getCurrentWindow().isAlwaysOnTop();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isAlwaysOnTop() {\n        return invoke('plugin:window|is_always_on_top', {\n            label: this.label\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().center();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async center() {\n        return invoke('plugin:window|center', {\n            label: this.label\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().requestUserAttention();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = { type: 'Critical' };\n            }\n            else {\n                requestType_ = { type: 'Informational' };\n            }\n        }\n        return invoke('plugin:window|request_user_attention', {\n            label: this.label,\n            value: requestType_\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setResizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setResizable(resizable) {\n        return invoke('plugin:window|set_resizable', {\n            label: this.label,\n            value: resizable\n        });\n    }\n    /**\n     * Enable or disable the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setEnabled(enabled) {\n        return invoke('plugin:window|set_enabled', {\n            label: this.label,\n            value: enabled\n        });\n    }\n    /**\n     * Whether the window is enabled or disabled.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async isEnabled() {\n        return invoke('plugin:window|is_enabled', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaximizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaximizable(maximizable) {\n        return invoke('plugin:window|set_maximizable', {\n            label: this.label,\n            value: maximizable\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinimizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinimizable(minimizable) {\n        return invoke('plugin:window|set_minimizable', {\n            label: this.label,\n            value: minimizable\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setClosable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setClosable(closable) {\n        return invoke('plugin:window|set_closable', {\n            label: this.label,\n            value: closable\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setTitle(title) {\n        return invoke('plugin:window|set_title', {\n            label: this.label,\n            value: title\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async maximize() {\n        return invoke('plugin:window|maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unmaximize() {\n        return invoke('plugin:window|unmaximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async toggleMaximize() {\n        return invoke('plugin:window|toggle_maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async minimize() {\n        return invoke('plugin:window|minimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unminimize() {\n        return invoke('plugin:window|unminimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invoke('plugin:window|show', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invoke('plugin:window|hide', {\n            label: this.label\n        });\n    }\n    /**\n     * Closes the window.\n     *\n     * Note this emits a closeRequested event so you can intercept it. To force window close, use {@link Window.destroy}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invoke('plugin:window|close', {\n            label: this.label\n        });\n    }\n    /**\n     * Destroys the window. Behaves like {@link Window.close} but forces the window close instead of emitting a closeRequested event.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().destroy();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async destroy() {\n        return invoke('plugin:window|destroy', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setDecorations(decorations) {\n        return invoke('plugin:window|set_decorations', {\n            label: this.label,\n            value: decorations\n        });\n    }\n    /**\n     * Whether or not the window should have shadow.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:**\n     *   - `false` has no effect on decorated window, shadows are always ON.\n     *   - `true` will make undecorated window have a 1px white border,\n     * and on Windows 11, it will have a rounded corners.\n     * - **Linux:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setShadow(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setShadow(enable) {\n        return invoke('plugin:window|set_shadow', {\n            label: this.label,\n            value: enable\n        });\n    }\n    /**\n     * Set window effects.\n     */\n    async setEffects(effects) {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: effects\n        });\n    }\n    /**\n     * Clear any applied effects if possible.\n     */\n    async clearEffects() {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: null\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnTop(alwaysOnTop) {\n        return invoke('plugin:window|set_always_on_top', {\n            label: this.label,\n            value: alwaysOnTop\n        });\n    }\n    /**\n     * Whether the window should always be below other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnBottom(true);\n     * ```\n     *\n     * @param alwaysOnBottom Whether the window should always be below other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnBottom(alwaysOnBottom) {\n        return invoke('plugin:window|set_always_on_bottom', {\n            label: this.label,\n            value: alwaysOnBottom\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setContentProtected(protected_) {\n        return invoke('plugin:window|set_content_protected', {\n            label: this.label,\n            value: protected_\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        return invoke('plugin:window|set_size', {\n            label: this.label,\n            value: size instanceof Size ? size : new Size(size)\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, PhysicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinSize(size) {\n        return invoke('plugin:window|set_min_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaxSize(size) {\n        return invoke('plugin:window|set_max_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window inner size constraints.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSizeConstraints({ minWidth: 300 });\n     * ```\n     *\n     * @param constraints The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSizeConstraints(constraints) {\n        function logical(pixel) {\n            return pixel ? { Logical: pixel } : null;\n        }\n        return invoke('plugin:window|set_size_constraints', {\n            label: this.label,\n            value: {\n                minWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minWidth),\n                minHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minHeight),\n                maxWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxWidth),\n                maxHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxHeight)\n            }\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        return invoke('plugin:window|set_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFullscreen(fullscreen) {\n        return invoke('plugin:window|set_fullscreen', {\n            label: this.label,\n            value: fullscreen\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invoke('plugin:window|set_focus', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIcon(icon) {\n        return invoke('plugin:window|set_icon', {\n            label: this.label,\n            value: transformImage(icon)\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSkipTaskbar(skip) {\n        return invoke('plugin:window|set_skip_taskbar', {\n            label: this.label,\n            value: skip\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorGrab(grab) {\n        return invoke('plugin:window|set_cursor_grab', {\n            label: this.label,\n            value: grab\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorVisible(visible) {\n        return invoke('plugin:window|set_cursor_visible', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorIcon(icon) {\n        return invoke('plugin:window|set_cursor_icon', {\n            label: this.label,\n            value: icon\n        });\n    }\n    /**\n     * Sets the window background color.\n     *\n     * #### Platform-specific:\n     *\n     * - **Windows:** alpha channel is ignored.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:window|set_background_color', { color });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorPosition(position) {\n        return invoke('plugin:window|set_cursor_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIgnoreCursorEvents(ignore) {\n        return invoke('plugin:window|set_ignore_cursor_events', {\n            label: this.label,\n            value: ignore\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startDragging() {\n        return invoke('plugin:window|start_dragging', {\n            label: this.label\n        });\n    }\n    /**\n     * Starts resize-dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startResizeDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startResizeDragging(direction) {\n        return invoke('plugin:window|start_resize_dragging', {\n            label: this.label,\n            value: direction\n        });\n    }\n    /**\n     * Sets the badge count. It is app wide and not specific to this window.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows**: Unsupported. Use @{linkcode Window.setOverlayIcon} instead.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeCount(5);\n     * ```\n     *\n     * @param count The badge count. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeCount(count) {\n        return invoke('plugin:window|set_badge_count', {\n            label: this.label,\n            value: count\n        });\n    }\n    /**\n     * Sets the badge cont **macOS only**.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeLabel(\"Hello\");\n     * ```\n     *\n     * @param label The badge label. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeLabel(label) {\n        return invoke('plugin:window|set_badge_label', {\n            label: this.label,\n            value: label\n        });\n    }\n    /**\n     * Sets the overlay icon. **Windows only**\n     * The overlay icon can be set for every window.\n     *\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     *\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setOverlayIcon(\"/tauri/awesome.png\");\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file. Use `undefined` to remove the overlay icon.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setOverlayIcon(icon) {\n        return invoke('plugin:window|set_overlay_icon', {\n            label: this.label,\n            value: icon ? transformImage(icon) : undefined\n        });\n    }\n    /**\n     * Sets the taskbar progress state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Progress bar is app-wide and not specific to this window.\n     * - **Linux**: Only supported desktop environments with `libunity` (e.g. GNOME).\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, ProgressBarStatus } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setProgressBar({\n     *   status: ProgressBarStatus.Normal,\n     *   progress: 50,\n     * });\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setProgressBar(state) {\n        return invoke('plugin:window|set_progress_bar', {\n            label: this.label,\n            value: state\n        });\n    }\n    /**\n     * Sets whether the window should be visible on all workspaces or virtual desktops.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows / iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setVisibleOnAllWorkspaces(visible) {\n        return invoke('plugin:window|set_visible_on_all_workspaces', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Sets the title bar style. **macOS only**.\n     *\n     * @since 2.0.0\n     */\n    async setTitleBarStyle(style) {\n        return invoke('plugin:window|set_title_bar_style', {\n            label: this.label,\n            value: style\n        });\n    }\n    /**\n     * Set window theme, pass in `null` or `undefined` to follow system theme\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Theme is app-wide and not specific to this window.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setTheme(theme) {\n        return invoke('plugin:window|set_theme', {\n            label: this.label,\n            value: theme\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onResized(handler) {\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\n            e.payload = new PhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onMoved(handler) {\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\n            e.payload = new PhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await getCurrentWindow().onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onCloseRequested(handler) {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, async (event) => {\n            const evt = new CloseRequestedEvent(event);\n            await handler(evt);\n            if (!evt.isPreventDefault()) {\n                await this.destroy();\n            }\n        });\n    }\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrentWindow().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'over') {\n     *    console.log('User hovering', event.payload.position);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onDragDropEvent(handler) {\n        const unlistenDrag = await this.listen(TauriEvent.DRAG_ENTER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'enter',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'over',\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDrop = await this.listen(TauriEvent.DRAG_DROP, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'drop',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenCancel = await this.listen(TauriEvent.DRAG_LEAVE, (event) => {\n            handler({ ...event, payload: { type: 'leave' } });\n        });\n        return () => {\n            unlistenDrag();\n            unlistenDrop();\n            unlistenDragOver();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\n            handler({ ...event, payload: true });\n        });\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\n            handler({ ...event, payload: false });\n        });\n        return () => {\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onScaleChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onThemeChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * Background throttling policy\n *\n * @since 2.0.0\n */\nvar BackgroundThrottlingPolicy;\n(function (BackgroundThrottlingPolicy) {\n    BackgroundThrottlingPolicy[\"Disabled\"] = \"disabled\";\n    BackgroundThrottlingPolicy[\"Throttle\"] = \"throttle\";\n    BackgroundThrottlingPolicy[\"Suspend\"] = \"suspend\";\n})(BackgroundThrottlingPolicy || (BackgroundThrottlingPolicy = {}));\n/**\n * Platform-specific window effects\n *\n * @since 2.0.0\n */\nvar Effect;\n(function (Effect) {\n    /**\n     * A default material appropriate for the view's effectiveAppearance.  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. You should instead choose an appropriate semantic material.\n     */\n    Effect[\"AppearanceBased\"] = \"appearanceBased\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Light\"] = \"light\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Dark\"] = \"dark\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"MediumLight\"] = \"mediumLight\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"UltraDark\"] = \"ultraDark\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Titlebar\"] = \"titlebar\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Selection\"] = \"selection\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Menu\"] = \"menu\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Popover\"] = \"popover\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Sidebar\"] = \"sidebar\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HeaderView\"] = \"headerView\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Sheet\"] = \"sheet\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"WindowBackground\"] = \"windowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HudWindow\"] = \"hudWindow\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"FullScreenUI\"] = \"fullScreenUI\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Tooltip\"] = \"tooltip\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"ContentBackground\"] = \"contentBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderWindowBackground\"] = \"underWindowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderPageBackground\"] = \"underPageBackground\";\n    /**\n     *  **Windows 11 Only**\n     */\n    Effect[\"Mica\"] = \"mica\";\n    /**\n     * **Windows 7/10/11(22H1) Only**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 11 build 22621.\n     */\n    Effect[\"Blur\"] = \"blur\";\n    /**\n     * **Windows 10/11**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 10 v1903+ and Windows 11 build 22000.\n     */\n    Effect[\"Acrylic\"] = \"acrylic\";\n    /**\n     * Tabbed effect that matches the system dark perefence **Windows 11 Only**\n     */\n    Effect[\"Tabbed\"] = \"tabbed\";\n    /**\n     * Tabbed effect with dark mode but only if dark mode is enabled on the system **Windows 11 Only**\n     */\n    Effect[\"TabbedDark\"] = \"tabbedDark\";\n    /**\n     * Tabbed effect with light mode **Windows 11 Only**\n     */\n    Effect[\"TabbedLight\"] = \"tabbedLight\";\n})(Effect || (Effect = {}));\n/**\n * Window effect state **macOS only**\n *\n * @see https://developer.apple.com/documentation/appkit/nsvisualeffectview/state\n *\n * @since 2.0.0\n */\nvar EffectState;\n(function (EffectState) {\n    /**\n     *  Make window effect state follow the window's active state **macOS only**\n     */\n    EffectState[\"FollowsWindowActiveState\"] = \"followsWindowActiveState\";\n    /**\n     *  Make window effect state always active **macOS only**\n     */\n    EffectState[\"Active\"] = \"active\";\n    /**\n     *  Make window effect state always inactive **macOS only**\n     */\n    EffectState[\"Inactive\"] = \"inactive\";\n})(EffectState || (EffectState = {}));\nfunction mapMonitor(m) {\n    return m === null\n        ? null\n        : {\n            name: m.name,\n            scaleFactor: m.scaleFactor,\n            position: new PhysicalPosition(m.position),\n            size: new PhysicalSize(m.size)\n        };\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n    return invoke('plugin:window|current_monitor').then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n    return invoke('plugin:window|primary_monitor').then(mapMonitor);\n}\n/**\n * Returns the monitor that contains the given point. Returns `null` if can't find any.\n * @example\n * ```typescript\n * import { monitorFromPoint } from '@tauri-apps/api/window';\n * const monitor = monitorFromPoint();\n * ```\n *\n * @since 1.0.0\n */\nasync function monitorFromPoint(x, y) {\n    return invoke('plugin:window|monitor_from_point', {\n        x,\n        y\n    }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n    return invoke('plugin:window|available_monitors').then((ms) => ms.map(mapMonitor));\n}\n/**\n * Get the cursor position relative to the top-left hand corner of the desktop.\n *\n * Note that the top-left hand corner of the desktop is not necessarily the same as the screen.\n * If the user uses a desktop with multiple monitors,\n * the top-left hand corner of the desktop is the top-left hand corner of the main monitor on Windows and macOS\n * or the top-left of the leftmost monitor on X11.\n *\n * The coordinates can be negative if the top-left hand corner of the window is outside of the visible screen region.\n */\nasync function cursorPosition() {\n    return invoke('plugin:window|cursor_position').then((v) => new PhysicalPosition(v));\n}\n\nexport { CloseRequestedEvent, Effect, EffectState, PhysicalPosition, PhysicalSize, ProgressBarStatus, UserAttentionType, Window, availableMonitors, currentMonitor, cursorPosition, getAllWindows, getCurrentWindow, monitorFromPoint, primaryMonitor };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2302, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/feitan/Desktop/new%20ai/node_modules/.pnpm/%40tauri-apps%2Bapi%402.5.0/node_modules/%40tauri-apps/api/webview.js"],"sourcesContent":["import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { getCurrentWindow, Window } from './window.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create webviews, communicate with other webviews and manipulate the current webview.\n *\n * #### Webview events\n *\n * Events can be listened to using {@link Webview.listen}:\n * ```typescript\n * import { getCurrentWebview } from \"@tauri-apps/api/webview\";\n * getCurrentWebview().listen(\"my-webview-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Get an instance of `Webview` for the current webview.\n *\n * @since 2.0.0\n */\nfunction getCurrentWebview() {\n    return new Webview(getCurrentWindow(), window.__TAURI_INTERNALS__.metadata.currentWebview.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Webview` for all available webviews.\n *\n * @since 2.0.0\n */\nasync function getAllWebviews() {\n    return invoke('plugin:webview|get_all_webviews').then((webviews) => webviews.map((w) => new Webview(new Window(w.windowLabel, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    }), w.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created webview\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new webview or get a handle to an existing one.\n *\n * Webviews are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n * import { Webview } from \"@tauri-apps/api/webview\"\n *\n * const appWindow = new Window('uniqueLabel');\n *\n * // loading embedded asset:\n * const webview = new Webview(appWindow, 'theUniqueLabel', {\n *   url: 'path/to/page.html'\n * });\n * // alternatively, load a remote URL:\n * const webview = new Webview(appWindow, 'theUniqueLabel', {\n *   url: 'https://github.com/tauri-apps/tauri'\n * });\n *\n * webview.once('tauri://created', function () {\n *  // webview successfully created\n * });\n * webview.once('tauri://error', function (e) {\n *  // an error happened creating the webview\n * });\n *\n * // emit an event to the backend\n * await webview.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await webview.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */\nclass Webview {\n    /**\n     * Creates a new Webview.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window'\n     * import { Webview } from '@tauri-apps/api/webview'\n     * const appWindow = new Window('my-label')\n     * const webview = new Webview(appWindow, 'my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview\n     * });\n     * ```\n     *\n     * @param window the window to add this webview to.\n     * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Webview} instance to communicate with the webview.\n     */\n    constructor(window, label, options) {\n        this.window = window;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:webview|create_webview', {\n                windowLabel: window.label,\n                label,\n                options\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Webview for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { Webview } from '@tauri-apps/api/webview';\n     * const mainWebview = Webview.getByLabel('main');\n     * ```\n     *\n     * @param label The webview label.\n     * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        return (_a = (await getAllWebviews()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Webview` for the current webview.\n     */\n    static getCurrent() {\n        return getCurrentWebview();\n    }\n    /**\n     * Gets a list of instances of `Webview` for all available webviews.\n     */\n    static async getAll() {\n        return getAllWebviews();\n    }\n    /**\n     * Listen to an emitted event on this webview.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const unlisten = await getCurrentWebview().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'Webview', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this webview only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const unlisten = await getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Webview initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'Webview', label: this.label }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().emit('webview-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emit(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().emitTo('main', 'webview-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emitTo(target, event, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line security/detect-object-injection\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line security/detect-object-injection\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The position of the top-left hand corner of the webview's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const position = await getCurrentWebview().position();\n     * ```\n     *\n     * @returns The webview's position.\n     */\n    async position() {\n        return invoke('plugin:webview|webview_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The physical size of the webview's client area.\n     * The client area is the content of the webview, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const size = await getCurrentWebview().size();\n     * ```\n     *\n     * @returns The webview's size.\n     */\n    async size() {\n        return invoke('plugin:webview|webview_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    // Setters\n    /**\n     * Closes the webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invoke('plugin:webview|webview_close', {\n            label: this.label\n        });\n    }\n    /**\n     * Resizes the webview.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalSize } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        return invoke('plugin:webview|set_webview_size', {\n            label: this.label,\n            value: size instanceof Size ? size : new Size(size)\n        });\n    }\n    /**\n     * Sets the webview position.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalPosition } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        return invoke('plugin:webview|set_webview_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Bring the webview to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invoke('plugin:webview|set_webview_focus', {\n            label: this.label\n        });\n    }\n    /**\n     * Hide the webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invoke('plugin:webview|webview_hide', {\n            label: this.label\n        });\n    }\n    /**\n     * Show the webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invoke('plugin:webview|webview_show', {\n            label: this.label\n        });\n    }\n    /**\n     * Set webview zoom level.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setZoom(1.5);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setZoom(scaleFactor) {\n        return invoke('plugin:webview|set_webview_zoom', {\n            label: this.label,\n            value: scaleFactor\n        });\n    }\n    /**\n     * Moves this webview to the given label.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().reparent('other-window');\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async reparent(window) {\n        return invoke('plugin:webview|reparent', {\n            label: this.label,\n            window: typeof window === 'string' ? window : window.label\n        });\n    }\n    /**\n     * Clears all browsing data for this webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().clearAllBrowsingData();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async clearAllBrowsingData() {\n        return invoke('plugin:webview|clear_all_browsing_data');\n    }\n    /**\n     * Specify the webview background color.\n     *\n     * #### Platfrom-specific:\n     *\n     * - **macOS / iOS**: Not implemented.\n     * - **Windows**:\n     *   - On Windows 7, transparency is not supported and the alpha value will be ignored.\n     *   - On Windows higher than 7: translucent colors are not supported so any alpha value other than `0` will be replaced by `255`\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:webview|set_webview_background_color', { color });\n    }\n    // Listeners\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrentWebview().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'over') {\n     *    console.log('User hovering', event.payload.position);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * When the debugger panel is open, the drop position of this event may be inaccurate due to a known limitation.\n     * To retrieve the correct drop position, please detach the debugger.\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onDragDropEvent(handler) {\n        const unlistenDragEnter = await this.listen(TauriEvent.DRAG_ENTER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'enter',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'over',\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragDrop = await this.listen(TauriEvent.DRAG_DROP, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'drop',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragLeave = await this.listen(TauriEvent.DRAG_LEAVE, (event) => {\n            handler({ ...event, payload: { type: 'leave' } });\n        });\n        return () => {\n            unlistenDragEnter();\n            unlistenDragDrop();\n            unlistenDragOver();\n            unlistenDragLeave();\n        };\n    }\n}\n\nexport { Webview, getAllWebviews, getCurrentWebview };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2848, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/feitan/Desktop/new%20ai/node_modules/.pnpm/%40tauri-apps%2Bapi%402.5.0/node_modules/%40tauri-apps/api/webviewWindow.js"],"sourcesContent":["import { getCurrentWebview, Webview } from './webview.js';\nimport { Window } from './window.js';\nimport { listen, once } from './event.js';\nimport { invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Get an instance of `Webview` for the current webview window.\n *\n * @since 2.0.0\n */\nfunction getCurrentWebviewWindow() {\n    const webview = getCurrentWebview();\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    return new WebviewWindow(webview.label, { skip: true });\n}\n/**\n * Gets a list of instances of `Webview` for all available webview windows.\n *\n * @since 2.0.0\n */\nasync function getAllWebviewWindows() {\n    return invoke('plugin:window|get_all_windows').then((windows) => windows.map((w) => new WebviewWindow(w, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass WebviewWindow {\n    /**\n     * Creates a new {@link Window} hosting a {@link Webview}.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow'\n     * const webview = new WebviewWindow('my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview\n     * });\n     * ```\n     *\n     * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link WebviewWindow} instance to communicate with the window and webview.\n     */\n    constructor(label, options = {}) {\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:webview|create_webview_window', {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === 'string'\n                        ? options.parent\n                        : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Webview for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { Webview } from '@tauri-apps/api/webviewWindow';\n     * const mainWebview = Webview.getByLabel('main');\n     * ```\n     *\n     * @param label The webview label.\n     * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        const webview = (_a = (await getAllWebviewWindows()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n        if (webview) {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            return new WebviewWindow(webview.label, { skip: true });\n        }\n        return null;\n    }\n    /**\n     * Get an instance of `Webview` for the current webview.\n     */\n    static getCurrent() {\n        return getCurrentWebviewWindow();\n    }\n    /**\n     * Gets a list of instances of `Webview` for all available webviews.\n     */\n    static async getAll() {\n        return getAllWebviewWindows();\n    }\n    /**\n     * Listen to an emitted event on this webivew window.\n     *\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n     * const unlisten = await WebviewWindow.getCurrent().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'WebviewWindow', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this webview window only once.\n     *\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n     * const unlisten = await WebviewWindow.getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Webview initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'WebviewWindow', label: this.label }\n        });\n    }\n    /**\n     * Set the window and webview background color.\n     *\n     * #### Platform-specific:\n     *\n     * - **Android / iOS:** Unsupported for the window layer.\n     * - **macOS / iOS**: Not implemented for the webview layer.\n     * - **Windows**:\n     *   - alpha channel is ignored for the window layer.\n     *   - On Windows 7, alpha channel is ignored for the webview layer.\n     *   - On Windows 8 and newer, if alpha channel is not `0`, it will be ignored.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:window|set_background_color', { color }).then(() => {\n            return invoke('plugin:webview|set_webview_background_color', { color });\n        });\n    }\n}\n// Order matters, we use window APIs by default\napplyMixins(WebviewWindow, [Window, Webview]);\n/** Extends a base class by other specified classes, without overriding existing properties */\nfunction applyMixins(baseClass, extendedClasses) {\n    (Array.isArray(extendedClasses)\n        ? extendedClasses\n        : [extendedClasses]).forEach((extendedClass) => {\n        Object.getOwnPropertyNames(extendedClass.prototype).forEach((name) => {\n            var _a;\n            if (typeof baseClass.prototype === 'object'\n                && baseClass.prototype\n                && name in baseClass.prototype)\n                return;\n            Object.defineProperty(baseClass.prototype, name, \n            // eslint-disable-next-line\n            (_a = Object.getOwnPropertyDescriptor(extendedClass.prototype, name)) !== null && _a !== void 0 ? _a : Object.create(null));\n        });\n    });\n}\n\nexport { WebviewWindow, getAllWebviewWindows, getCurrentWebviewWindow };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}